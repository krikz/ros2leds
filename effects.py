#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Image
import numpy as np
import math
import time
import random
import sounddevice as sd
import threading
import subprocess

class RobotMouthPublisher(Node):
    def __init__(self):
        super().__init__('robot_mouth_publisher')
        self.publisher_ = self.create_publisher(Image, '/panel_image', 10)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–∏—Å–ø–ª–µ—è
        self.width = 25
        self.height = 5
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–µ–π
        self.time_offset = 0.0
        self.time_step = 0.05  # –°–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞–º–∏
        self.modes = [
            "Sound Wave Mouth",
            "Cyberpunk Display",
            "Plasma Fire Mouth",
            "Audio Equalizer",
            "Holographic Mouth"
        ]
        self.current_mode = 0
        self.last_mode_switch = time.time()
        self.mode_switch_interval = 10.0  # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫
        
        # –î–ª—è –∞–º–ø–ª–∏—Ç—É–¥—ã –∏–∑ –∞—É–¥–∏–æ–≤—ã—Ö–æ–¥–∞
        self.current_amplitude = 0.0
        self.audio_lock = threading.Lock()
        self.audio_stream = None
        self.running = True
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—É–¥–∏–æ
        self.sample_rate = 22050  # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏
        self.block_size = 512     # –ú–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ –¥–ª—è –Ω–∏–∑–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è PulseAudio (–¥–∞–µ—Ç –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è)
        time.sleep(2)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏–æ
        self.setup_audio_monitoring()
        
        # –¢–∞–π–º–µ—Ä—ã
        self.create_timer(0.033, self.frame_callback)  # 30 FPS
        self.create_timer(1.0, self.debug_callback)    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        
        self.get_logger().info(f'ü§ñ Robot mouth publisher started with {len(self.modes)} modes')
        self.get_logger().info('üîä Monitoring SYSTEM AUDIO OUTPUT - play music to see effects!')

    def setup_audio_monitoring(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞—É–¥–∏–æ–≤—ã—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ PulseAudio"""
        try:
            # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ pactl
            result = subprocess.run(['pactl', 'list', 'sources'], 
                                   capture_output=True, text=True)
            sources = result.stdout
            
            # –®–∞–≥ 2: –ò—â–µ–º –º–æ–Ω–∏—Ç–æ—Ä–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            monitor_devices = []
            current_source = {}
            
            for line in sources.split('\n'):
                if "Name:" in line:
                    current_source['name'] = line.split(':')[1].strip()
                if "Description:" in line:
                    current_source['description'] = line.split(':')[1].strip()
                    if "monitor" in current_source['description'].lower():
                        monitor_devices.append(current_source.copy())
                    current_source = {}
            
            # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ sounddevice
            sd_devices = sd.query_devices()
            pulse_device_id = None
            
            for i, device in enumerate(sd_devices):
                # –ò—â–µ–º PulseAudio —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                if "pulse" in device['name'].lower() and device['max_input_channels'] > 0:
                    pulse_device_id = i
                    break
            
            if pulse_device_id is not None:
                self.get_logger().info(f"üéß Using PulseAudio monitor device (ID: {pulse_device_id})")
                self.get_logger().info(f"üí° Description: {sd_devices[pulse_device_id]['name']}")
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ —Å –∏–Ω–¥–µ–∫—Å–æ–º PulseAudio
                self.audio_stream = sd.InputStream(
                    device=pulse_device_id,
                    channels=1,
                    samplerate=self.sample_rate,
                    blocksize=self.block_size,
                    callback=self.audio_callback
                )
                self.audio_stream.start()
            else:
                raise RuntimeError("No PulseAudio monitor device found in sounddevice")
                
        except Exception as e:
            self.get_logger().error(f"‚ùå Audio monitoring error: {str(e)}")
            self.get_logger().warn("‚ö†Ô∏è FALLBACK: Using synthetic audio signal generation")
            
            # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞–º–ø–ª–∏—Ç—É–¥—ã (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!)
            def fallback_audio_callback(timer):
                with self.audio_lock:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω—ã–π —Å–∏–≥–Ω–∞–ª
                    base = math.sin(self.time_offset * 0.5) * 0.5 + 0.5
                    detail1 = math.sin(self.time_offset * 3.0) * 0.2
                    detail2 = math.sin(self.time_offset * 7.0 + 1.0) * 0.15
                    if random.random() < 0.02:
                        detail2 += 0.3 * random.random()
                    
                    raw_amplitude = max(0.0, min(1.0, base + detail1 + detail2))
                    self.current_amplitude = 0.9 * self.current_amplitude + 0.1 * raw_amplitude
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è fallback (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!)
            self.create_timer(0.05, fallback_audio_callback)

    def audio_callback(self, indata, frames, time, status):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        if status:
            self.get_logger().warning(f"‚ö†Ô∏è Audio status: {status}")
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∞–º–ø–ª–∏—Ç—É–¥—É –∫–∞–∫ RMS
        if indata is not None and len(indata) > 0:
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª (–º–æ–Ω–æ)
            audio_data = indata[:, 0]
            
            # –í—ã—á–∏—Å–ª—è–µ–º RMS
            rms = np.sqrt(np.mean(np.square(audio_data)))
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–æ–π –¥–ª—è –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            normalized = min(1.0, rms * 15)  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ–¥–æ–±—Ä–∞–Ω –¥–ª—è –≤–∞—à–µ–≥–æ –∑–≤—É–∫–∞
            
            # –ü–ª–∞–≤–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
            with self.audio_lock:
                self.current_amplitude = 0.7 * self.current_amplitude + 0.3 * normalized

    def get_amplitude(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∞–º–ø–ª–∏—Ç—É–¥—É —Å –ø–ª–∞–≤–Ω—ã–º –ø–∞–¥–µ–Ω–∏–µ–º –ø—Ä–∏ —Ç–∏—à–∏–Ω–µ"""
        with self.audio_lock:
            amp = self.current_amplitude
        
        # –ü–ª–∞–≤–Ω–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–≤—É–∫–∞
        if amp < 0.01:
            self.current_amplitude = 0.0
        elif amp > 0:
            self.current_amplitude = max(0, amp - 0.02)
        
        return self.current_amplitude

    def generate_sound_mouth(self, amplitude):
        """–†–µ–∂–∏–º 1: –ó–≤—É–∫–æ–≤–∞—è –≤–æ–ª–Ω–∞ –≤ —Ñ–æ—Ä–º–µ —Ä—Ç–∞"""
        img = np.zeros((self.height, self.width, 3), dtype=np.uint8)
        A = min(1.0, max(0.0, amplitude))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º U-–æ–±—Ä–∞–∑–Ω—ã–π —Ä–æ—Ç
        mouth_height = max(1, int(3 * A * (1 + 0.5 * math.sin(self.time_offset * 2.0))))
        center_x = self.width // 2
        
        for x in range(self.width):
            # –ü–∞—Ä–∞–±–æ–ª–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞ —Ä—Ç–∞
            dx = abs(x - center_x) / center_x
            wave_height = int(mouth_height * (1 - dx * dx * 0.7))
            
            # –ó—É–±—ã (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–º–ø–ª–∏—Ç—É–¥–µ > 0.3)
            if A > 0.3 and (x < 4 or x > self.width - 5):
                img[4, x] = [200, 200, 255]
            
            # –ì—É–±—ã
            img[4, x] = [100, 0, 0]
            
            # –í–Ω—É—Ç—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ä—Ç–∞ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –≤–æ–ª–Ω—ã
            for y in range(4 - wave_height, 4):
                r = int(200 * A * (0.7 + 0.3 * math.sin(self.time_offset + y)))
                g = int(100 * A * (y - (4 - wave_height)) / wave_height)
                img[y, x] = [r, g, 0]
        
        return img

    def generate_cyber_mouth(self, amplitude):
        """–†–µ–∂–∏–º 2: –ö–∏–±–µ—Ä–ø–∞–Ω–∫-–¥–∏—Å–ø–ª–µ–π"""
        img = np.zeros((self.height, self.width, 3), dtype=np.uint8)
        A = min(1.0, max(0.0, amplitude))
        offset = int((self.time_offset * 10) % self.width)
        
        for x in range(self.width):
            # –°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–∞
            bar_height = int(3 * A * (1 - abs(x/self.width - 0.5)*1.5))
            
            # –ó—É–±—ã –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
            if x % 5 == 0:
                img[4, x] = [255, 255, 255]
            
            # –°–≤–µ—Ç–æ–¥–∏–æ–¥–Ω—ã–µ —Å—Ç–æ–ª–±–∏–∫–∏
            for y in range(4 - bar_height, 4):
                intensity = 150 + int(100 * A)
                img[y, x] = [0, intensity, intensity]
            
            # –ë–µ–≥—É—â–∞—è —Å—Ç—Ä–æ–∫–∞
            if (x + offset) % 5 == 0 and A > 0.4:
                img[0, x] = [255, 255, 0]
        
        # –≠—Ñ—Ñ–µ–∫—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        scan_line = int((self.time_offset * 5) % self.height)
        if scan_line < 4:
            for x in range(self.width):
                img[scan_line, x] = [50, 255, 50]
        
        return img

    def generate_plasma_mouth(self, amplitude):
        """–†–µ–∂–∏–º 3: –ü–ª–∞–∑–º–µ–Ω–Ω—ã–π –æ–≥–æ–Ω—å"""
        img = np.zeros((self.height, self.width, 3), dtype=np.uint8)
        A = min(1.0, max(0.0, amplitude))
        
        for y in range(self.height):
            for x in range(self.width):
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–ª–∞—Å—Ç—å —Ä—Ç–∞
                in_mouth = (y > 1) and (abs(x - 12) < 10 - y*2)
                if not in_mouth:
                    continue
                
                # –ü–ª–∞–∑–º–µ–Ω–Ω—ã–µ –≤–æ–ª–Ω—ã
                value1 = math.sin(x * 0.2 + self.time_offset * A)
                value2 = math.sin(y * 0.5 + self.time_offset * 2)
                value3 = math.sin(math.sqrt(x*x + y*y) * 0.3 + self.time_offset * 0.5)
                plasma = (value1 + value2 + value3) / 3.0
                
                # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ (–∫—Ä–∞—Å–Ω—ã–π -> –±–µ–ª—ã–π)
                r = int(200 * (0.5 + plasma/2) * A * 1.2)
                g = int(100 * (0.5 + plasma/2) * A * 0.7)
                b = int(50 * (0.5 + plasma/2) * A * 0.3)
                img[y, x] = [min(255, r), min(255, g), min(255, b)]
        
        # –ó—É–±—ã —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º —Å–≤–µ—á–µ–Ω–∏—è
        for x in [2, 3, 22, 23]:
            glow = int(100 + 155 * math.sin(self.time_offset * 3))
            img[4, x] = [glow, glow, 255]
        
        return img

    def generate_equalizer_mouth(self, amplitude):
        """–†–µ–∂–∏–º 4: –ê—É–¥–∏–æ —ç–∫–≤–∞–ª–∞–π–∑–µ—Ä"""
        img = np.zeros((self.height, self.width, 3), dtype=np.uint8)
        A = min(1.0, max(0.0, amplitude))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–ª–µ–±–∞–Ω–∏—è
        for x in range(self.width):
            # –ë–∞–∑–æ–≤–∞—è –≤—ã—Å–æ—Ç–∞ —Å—Ç–æ–ª–±–∏–∫–∞
            base_height = 1 + int(3 * A * (1 - abs(x/self.width - 0.5)))
            
            # –î–æ–±–∞–≤–ª—è–µ–º "–¥—Ä–æ–∂–∞–Ω–∏–µ" –æ—Ç –∞–º–ø–ª–∏—Ç—É–¥—ã
            noise = int(1 * A * math.sin(self.time_offset * 5 + x))
            bar_height = max(1, min(4, base_height + noise))
            
            # –ó—É–±—ã (–≤—ã—Å–æ–∫–∏–µ –ø–∏–∫–∏)
            if bar_height == 4 and x % 4 == 0:
                img[4, x] = [255, 255, 255]
            
            # –†–æ—Ç –∏–∑ —Å—Ç–æ–ª–±–∏–∫–æ–≤
            for y in range(4 - bar_height, 4):
                # –ì—Ä–∞–¥–∏–µ–Ω—Ç: —Ç–µ–º–Ω–µ–µ —É –æ—Å–Ω–æ–≤–∞–Ω–∏—è
                intensity = 100 + int(155 * (y - (4 - bar_height)) / bar_height)
                img[y, x] = [intensity, 0, 0]
        
        # –≠—Ñ—Ñ–µ–∫—Ç "—É–¥–∞—Ä–Ω–æ–π –≤–æ–ª–Ω—ã" –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –∞–º–ø–ª–∏—Ç—É–¥–µ
        if A > 0.8:
            wave_pos = int((self.time_offset * 15) % self.width)
            for y in range(self.height):
                if 0 <= wave_pos < self.width:
                    img[y, wave_pos] = [255, 255, 255]
        
        return img

    def generate_hologram_mouth(self, amplitude):
        """–†–µ–∂–∏–º 5: –ì–æ–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ä–æ—Ç"""
        img = np.zeros((self.height, self.width, 3), dtype=np.uint8)
        A = min(1.0, max(0.0, amplitude))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º "–≥–æ–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —à—É–º"
        for y in range(self.height):
            for x in range(self.width):
                # –§–æ—Ä–º–∞ —Ä—Ç–∞
                in_mouth = (y > 1) and (x > 3 and x < 22) and (abs(x-12) < 8 - y)
                
                # –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ü–∏–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∞–º–ø–ª–∏—Ç—É–¥—ã
                if in_mouth and random.random() < A * 0.8:
                    # –ì–æ–ª—É–±–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
                    intensity = 100 + int(155 * A)
                    img[y, x] = [0, intensity//2, intensity]
                    
                    # –≠—Ñ—Ñ–µ–∫—Ç "–¥—Ä–æ–∂–∞–Ω–∏—è" –ø—Ä–∏ –Ω–∏–∑–∫–æ–π –∞–º–ø–ª–∏—Ç—É–¥–µ
                    if A < 0.4 and int(x + y + self.time_offset*10) % 3 == 0:
                        img[y, x] = [0, 0, 0]  # –ü—Ä–æ—Ä—ã–≤—ã
        
        # –ö–æ–Ω—Ç—É—Ä–Ω—ã–µ –ª–∏–Ω–∏–∏
        for x in range(0, self.width, 4):
            if random.random() < A:
                img[0, x] = [0, 255, 255]
        
        # –≠—Ñ—Ñ–µ–∫—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
        interference_y = int((self.time_offset * 3) % self.height)
        if interference_y < 4:
            for x in range(self.width):
                if x % 3 == 0:
                    img[interference_y, x] = [255, 255, 255]
        
        return img

    def frame_callback(self, timer=None):
        """–û—Å–Ω–æ–≤–Ω–æ–π callback –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞–¥—Ä–æ–≤"""
        self.time_offset += self.time_step
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–º–ø–ª–∏—Ç—É–¥—É –∏–∑ –∞—É–¥–∏–æ–≤—ã—Ö–æ–¥–∞
        amplitude = self.get_amplitude()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞
        if time.time() - self.last_mode_switch > self.mode_switch_interval:
            self.current_mode = (self.current_mode + 1) % len(self.modes)
            self.last_mode_switch = time.time()
            self.get_logger().info(f'üîÑ Mode switched to: {self.modes[self.current_mode]}')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if self.current_mode == 0:
            img = self.generate_sound_mouth(amplitude)
        elif self.current_mode == 1:
            img = self.generate_cyber_mouth(amplitude)
        elif self.current_mode == 2:
            img = self.generate_plasma_mouth(amplitude)
        elif self.current_mode == 3:
            img = self.generate_equalizer_mouth(amplitude)
        else:
            img = self.generate_hologram_mouth(amplitude)
        
        # –ü—É–±–ª–∏–∫—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        msg = Image()
        msg.header.frame_id = 'main_display'
        msg.height = self.height
        msg.width = self.width
        msg.encoding = 'rgb8'
        msg.is_bigendian = 0
        msg.step = self.width * 3
        msg.data = img.tobytes()
        
        self.publisher_.publish(msg)

    def debug_callback(self, timer=None):
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
        amp = self.get_amplitude()
        remaining = max(0, self.mode_switch_interval - (time.time() - self.last_mode_switch))
        self.get_logger().debug(
            f'üñ•Ô∏è Mode: {self.modes[self.current_mode]} | '
            f'üîä Audio Level: {amp:.2f} | '
            f'üîÑ Next switch: {remaining:.1f}s'
        )

    def destroy_node(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ"""
        self.running = False
        if self.audio_stream:
            try:
                self.audio_stream.stop()
                self.audio_stream.close()
            except:
                pass
        super().destroy_node()

def main(args=None):
    rclpy.init(args=args)
    
    try:
        node = RobotMouthPublisher()
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    except Exception as e:
        print(f"‚ùå Critical error: {e}")
    finally:
        node.destroy_node()
        rclpy.shutdown()
        print("‚úÖ Robot mouth node shutdown complete")

if __name__ == '__main__':
    main()